# -*- coding: utf-8 -*-
"""Assignment_1_Pytorch_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9KpbQyFU4zfq8zLLns8a2Kd8PRMGsaZ

Overall structure:

1) Set Pytorch metada
- seed
- tensorflow output
- whether to transfer to gpu (cuda)

2) Import data
- download data
- create data loaders with batchsie, transforms, scaling

3) Define Model architecture, loss and optimizer

4) Define Test and Training loop
    - Train:
        a. get next batch
        b. forward pass through model
        c. calculate loss
        d. backward pass from loss (calculates the gradient for each parameter)
        e. optimizer: performs weight updates

5) Perform Training over multiple epochs:
    Each epoch:
    - call train loop
    - call test loop

Acknowledgments:https://github.com/motokimura/pytorch_tensorboard/blob/master/main.py
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.tensorboard import SummaryWriter
from datetime import datetime
import os
os.environ['KMP_DUPLICATE_LIB_OK']='True'

# Hyperparameters
batch_size = 64
test_batch_size = 1000
epochs = 5
lr = 0.005
try_cuda = True
seed = 1000
logging_interval = 100

# 1) setting up the logging
# [inset-code: set up logging]
datetime_str = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
log_dir = f'runs/mnist_dcn_{datetime_str}'
writer = SummaryWriter(log_dir)

# Deciding whether to send to the cpu or not if available
cuda = torch.cuda.is_available() and try_cuda
if cuda:
    torch.cuda.manual_seed(seed)
else:
    torch.manual_seed(seed)

device = torch.device('cuda' if cuda else 'cpu')

# Setting up data
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))
])

train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True, transform=transform),
    batch_size=batch_size, shuffle=True
)

test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=False, transform=transform),
    batch_size=test_batch_size, shuffle=False
)

# Defining Architecture, loss, and optimizer
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=5)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=5)
        self.fc1 = nn.Linear(1024, 1024)
        self.fc2 = nn.Linear(1024, 10)
        self.conv2_drop = nn.Dropout2d()

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 1024)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

# Function to run training with different configurations
def run_training_with_configurations(configurations):
    for config in configurations:
        activation, init_method, opt_algorithm, learning_rate = config
        print(f"Running configuration: Activation={activation}, Initialization={init_method}, Optimizer={opt_algorithm}, LR={learning_rate}")

        # Initialize model with selected activation function and initialization
        model = Net().to(device)
        for layer in model.modules():
            if isinstance(layer, (nn.Conv2d, nn.Linear)):
                if init_method == 'xavier':
                    nn.init.xavier_uniform_(layer.weight)
                elif init_method == 'he':
                    nn.init.kaiming_uniform_(layer.weight, nonlinearity='relu')
                else:
                    nn.init.normal_(layer.weight, mean=0, std=0.01)

        # Set optimizer
        if opt_algorithm == 'adam':
            optimizer = optim.Adam(model.parameters(), lr=learning_rate)
        elif opt_algorithm == 'sgd':
            optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9)
        elif opt_algorithm == 'adagrad':
            optimizer = optim.Adagrad(model.parameters(), lr=learning_rate)

        # Training loop
        for epoch in range(1, epochs + 1):
            train_epoch(model, optimizer, epoch, activation)
            test_epoch(model, epoch)

# Defining the test and training loops
def train_epoch(model, optimizer, epoch, activation):
    model.train()
    criterion = nn.CrossEntropyLoss()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()
        optimizer.step()

        if batch_idx % logging_interval == 0:
            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)} ' +
                  f'({100. * batch_idx / len(train_loader):.0f}%)]\tLoss: {loss.item():.6f}')
            n_iter = epoch * len(train_loader) + batch_idx
            writer.add_scalar('training_loss', loss.item(), n_iter)

    # Log model parameters to TensorBoard at every epoch
    for name, param in model.named_parameters():
        writer.add_histogram(name, param.clone().cpu().data.numpy(), epoch)

def test_epoch(model, epoch):
    model.eval()
    test_loss = 0
    correct = 0
    criterion = nn.CrossEntropyLoss(reduction='sum')
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += criterion(output, target).item()
            pred = output.argmax(dim=1, keepdim=True)
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    accuracy = 100. * correct / len(test_loader.dataset)
    print(f'\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)} ' +
          f'({accuracy:.2f}%)\n')
    writer.add_scalar('test_loss', test_loss, epoch)
    writer.add_scalar('test_accuracy', accuracy, epoch)

# Define different configurations to test
configurations = [
    # Running configuration: Activation=, Initialization=, Optimizer=, LR=
    # ('relu', 'xavier', 'adam', 0.005),
    # ('sigmoid', 'he', 'sgd', 0.01),
    # ('tanh', 'xavier', 'adagrad', 0.01),
    ('leaky_relu', 'he', 'adam', 0.005),
]

# Run training with different configurations
run_training_with_configurations(configurations)

writer.close()

# Commented out IPython magic to ensure Python compatibility.
"""
#https://stackoverflow.com/questions/55970686/tensorboard-not-found-as-magic-function-in-jupyter

#seems to be working in firefox when not working in Google Chrome when running in Colab
#https://stackoverflow.com/questions/64218755/getting-error-403-in-google-colab-with-tensorboard-with-firefox

# %load_ext tensorboard
# %tensorboard --logdir [dir]

"""